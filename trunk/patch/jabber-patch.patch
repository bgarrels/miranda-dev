Index: miranda/protocols/JabberG/jabber_caps.h
===================================================================
--- miranda/protocols/JabberG/jabber_caps.h	(revision 11368)
+++ miranda/protocols/JabberG/jabber_caps.h	(working copy)
@@ -130,6 +130,8 @@
 #define JABBER_FEAT_JINGLE                      "urn:xmpp:jingle:1"
 #define JABBER_CAPS_JINGLE                      ((JabberCapsBits)1<<39)

+//XEP-0172 Support
+#define JABBER_FEAT_PRESENCE_NICKNAME           "http://jabber.org/protocol/nick"
 #define JABBER_FEAT_PUBSUB_EVENT                "http://jabber.org/protocol/pubsub#event"
 #define JABBER_FEAT_PUBSUB_NODE_CONFIG          "http://jabber.org/protocol/pubsub#node_config"
\ No newline at end of file
Index: miranda/protocols/JabberG/jabber_proto.h
===================================================================
--- miranda/protocols/JabberG/jabber_proto.h	(revision 11368)
+++ miranda/protocols/JabberG/jabber_proto.h	(working copy)
@@ -871,6 +871,7 @@
 	void   OnProcessProtocol( HXML node, ThreadData *info );

 	void   UpdateJidDbSettings( const TCHAR *jid );
+	bool   ResolveJabberNickFromNickTag( HXML nickNode, LPCTSTR from );
 	HANDLE CreateTemporaryContact( const TCHAR *szJid, JABBER_LIST_ITEM* chatItem );

 	void   PerformRegistration( ThreadData* info );
Index: miranda/protocols/JabberG/jabber_thread.cpp
===================================================================
--- miranda/protocols/JabberG/jabber_thread.cpp	(revision 11368)
+++ miranda/protocols/JabberG/jabber_thread.cpp	(working copy)
@@ -1531,6 +1531,50 @@
 	MenuUpdateSrmmIcon( item );
 }

+bool CJabberProto::ResolveJabberNickFromNickTag( HXML nickNode, LPCTSTR from )
+{
+	//XEP-0172 Support (Nickname-TAG)
+
+	if ( nickNode == NULL ) return false;
+
+	TCHAR* JIDnick;
+	LPCTSTR nick_xmlns;
+	bool bResolved = false;
+
+	if (( nick_xmlns = xmlGetAttrValue( nickNode, _T("xmlns"))) != NULL )
+	{
+		if (!_tcscmp( nick_xmlns, _T(JABBER_FEAT_PRESENCE_NICKNAME) ))
+		{
+			LPCTSTR nick;
+			if (( nick = xmlGetText( nickNode ) ) != NULL )
+			{
+				if (( JIDnick = JabberNickFromJID( from )) != NULL )
+				{
+					DBVARIANT jid;
+					HANDLE hContactAi = HContactFromJID( from );
+
+					if ( !JGetStringT( hContactAi, "jid", &jid ))
+					{
+						JABBER_LIST_ITEM* item = ListGetItemPtr( LIST_ROSTER, jid.ptszVal );
+						JFreeVariant( &jid );
+
+						if ( (item != NULL) && (item->nick != NULL) )
+						{
+							if (!lstrcmp(item->nick, JIDnick) || !lstrcmp(item->nick, _T("")))
+							{
+								AddContactToRoster( item->jid, nick, item->group );
+								bResolved = true;
+							}
+						}
+					}
+					mir_free(JIDnick);
+				}
+			}
+		}
+	}
+
+	return bResolved;
+}
+
 void CJabberProto::OnProcessPresence( HXML node, ThreadData* info )
 {
 	HANDLE hContact;
@@ -1542,6 +1586,8 @@
 	if ( !node || !xmlGetName( node ) ||_tcscmp( xmlGetName( node ), _T("presence"))) return;
 	if (( from = xmlGetAttrValue( node, _T("from"))) == NULL ) return;

+	ResolveJabberNickFromNickTag( xmlGetChild( node , "nick" ), from );
+
 	if ( m_presenceManager.HandlePresencePermanent( node, info ))
 		return;
\ No newline at end of file