Index: miranda/src/modules/database/dbini.cpp
===================================================================
--- miranda/src/modules/database/dbini.cpp	(revision 9996)
+++ miranda/src/modules/database/dbini.cpp	(working copy)
@@ -93,7 +93,7 @@
 	char *szUnsafeSections;
 	char *szName;
 	char *szValue;
-	int warnNoMore,cancel;
+	int utf8conv,warnNoMore,cancel;
 };
 
 static INT_PTR CALLBACK WarnIniChangeDlgProc(HWND hwndDlg,UINT message,WPARAM wParam,LPARAM lParam)
@@ -111,7 +111,17 @@
 			lstrcatA(szSettingName," / ");
 			lstrcatA(szSettingName,warnInfo->szName);
 			SetDlgItemTextA(hwndDlg,IDC_SETTINGNAME,szSettingName);
-			SetDlgItemTextA(hwndDlg,IDC_NEWVALUE,warnInfo->szValue);
+			if (warnInfo->utf8conv) {
+				TCHAR *pwszValue;
+#if defined( _UNICODE )
+				pwszValue = Utf8DecodeUcs2(warnInfo->szValue);
+#else
+				pwszValue = mir_strdup(warnInfo->szValue);
+				Utf8Decode(pwszValue);
+#endif
+				SetDlgItemText(hwndDlg,IDC_NEWVALUE,pwszValue);
+			} else
+				SetDlgItemTextA(hwndDlg,IDC_NEWVALUE,warnInfo->szValue);
 			if(IsInSpaceSeparatedList(warnInfo->szSection,warnInfo->szSafeSections))
 				pszSecurityInfo=LPGENT("This change is known to be safe.");
 			else if(IsInSpaceSeparatedList(warnInfo->szSection,warnInfo->szUnsafeSections))
@@ -177,27 +187,63 @@
 	return FALSE;
 }
 
+static void UnescapeUtf8String(char *szDest, const char *szSrc, int max_size)
+{
+	if (max_size <= 0)
+		return;
+
+	for (;(*szDest=*szSrc) && --max_size;++szSrc,++szDest) {
+		if ('\\' == *szDest) {
+			switch (*++szSrc) {
+			case 'n': *szDest = '\n'; break;
+			case 't': *szDest = '\t'; break;
+			case 'r': *szDest = '\r'; break;
+			case 'x':
+				{	char code[3], *codeend;
+				strncpy(code, szSrc+1, 2);
+				*szDest = strtol(code,&codeend,0x10) & 0x7F;
+				if ( *szDest && *codeend == '\0')
+					szSrc += 2;
+				else
+					*szDest = 'x';
+				break;
+				}
+			default: *szDest = *szSrc; break;
+	}	}	}
+
+	for (;(0xC0&*szDest)==0x80;--szDest); //remove incomplete trailing utf8 character
+	*szDest = 0;
+}
+
 static void ProcessIniFile(TCHAR* szIniPath, char *szSafeSections, char *szUnsafeSections, int secur, bool secFN)
 {
 	FILE *fp = _tfopen(szIniPath, _T("rt"));
 	if ( fp == NULL )
 		return;
 
+	bool utf8;
+	{	char utf8header[3]; utf8header[2] = 0;
+		fread(utf8header, 1, 3, fp);
+		utf8 = !strncmp(utf8header, "\xef\xbb\xbf", 3);
+		if (!utf8)
+			fseek(fp, 0, SEEK_SET);
+	}
+
 	bool warnThisSection = false;
 	char szSection[128]; szSection[0] = 0;
 
 	while(!feof(fp)) {
-		char szLine[2048];
+		char szLine[4096];
 		if (fgets(szLine,sizeof(szLine),fp) == NULL) 
 			break;
 
+		if (szLine[0]==';' || szLine[0]<=' ') 
+			continue;
+
 		int lineLength = lstrlenA(szLine);
 		while (lineLength && (BYTE)(szLine[lineLength-1])<=' ')
 			szLine[--lineLength]='\0';
 
-		if (szLine[0]==';' || szLine[0]<=' ') 
-			continue;
-
 		if (szLine[0]=='[') {
 			char *szEnd = strchr(szLine+1,']');
 			if (szEnd == NULL)
@@ -206,7 +252,11 @@
 			if (szLine[1] == '!')
 				szSection[0] = '\0';
 			else {
-				lstrcpynA(szSection,szLine+1,min(sizeof(szSection),(int)(szEnd-szLine)));
+				if (utf8) {
+					UnescapeUtf8String(szSection,szLine+1,min(sizeof(szSection),(int)(szEnd-szLine)));
+					Utf8Decode(szSection,NULL);
+				} else
+					lstrcpynA(szSection,szLine+1,min(sizeof(szSection),(int)(szEnd-szLine)));
 				switch (secur) {
 				case 0:
 					warnThisSection = false;
@@ -237,9 +287,13 @@
 			continue;
 
 		char szName[128];
-		lstrcpynA(szName,szLine,min(sizeof(szName),(int)(szValue-szLine+1)));
+		if (utf8) {
+			UnescapeUtf8String(szName,szLine,min(sizeof(szName),(int)(szValue-szLine+1)));
+			Utf8Decode(szName,NULL);
+		} else
+			lstrcpynA(szName,szLine,min(sizeof(szName),(int)(szValue-szLine+1)));
 		szValue++;
-		{
+		if (warnThisSection) {
 			warnSettingChangeInfo_t warnInfo;
 			warnInfo.szIniPath=szIniPath;
 			warnInfo.szName=szName;
@@ -247,9 +301,10 @@
 			warnInfo.szSection=szSection;
 			warnInfo.szUnsafeSections=szUnsafeSections;
 			warnInfo.szValue=szValue;
+			warnInfo.utf8conv=utf8 && ('s'==szValue[0] || 'u'==szValue[0] || 'S'==szValue[0] || 'U'==szValue[0]);
 			warnInfo.warnNoMore=0;
 			warnInfo.cancel=0;
-			if(warnThisSection && IDNO==DialogBoxParam(hMirandaInst,MAKEINTRESOURCE(IDD_WARNINICHANGE),NULL,WarnIniChangeDlgProc,(LPARAM)&warnInfo))
+			if(IDNO==DialogBoxParam(hMirandaInst,MAKEINTRESOURCE(IDD_WARNINICHANGE),NULL,WarnIniChangeDlgProc,(LPARAM)&warnInfo))
 				continue;
 			if(warnInfo.cancel)
 				break;
@@ -257,6 +312,9 @@
 				warnThisSection=0;
 		}
 
+		if (utf8 && ('s'==szValue[0] || 'u'==szValue[0] || 'S'==szValue[0] || 'U'==szValue[0]))
+			UnescapeUtf8String(szValue+1,szValue+1,sizeof(szLine)-(szValue+1-szLine));
+
 		switch(szValue[0]) {
 		case 'b':
 		case 'B':
@@ -276,6 +334,8 @@
 			break;
 		case 's':
 		case 'S':
+			if (utf8)
+				Utf8Decode(szValue+1,NULL);
 			DBWriteContactSettingString(NULL,szSection,szName,szValue+1);
 			break;
 		case 'u':
@@ -305,7 +365,7 @@
 			}
 			break;
 		default:
-			MessageBox(NULL,TranslateT("Invalid setting type. The first character of every value must be b, w, d, l, s or n."),TranslateT("Install Database Settings"),MB_OK);
+			MessageBox(NULL,TranslateT("Invalid setting type. The first character of every value must be b, w, d, l, s, u, or n."),TranslateT("Install Database Settings"),MB_OK);
 			break;
 		}
 	}
Index: miranda/docs/autoexec_sample.ini
===================================================================
--- miranda/docs/autoexec_sample.ini	(revision 9996)
+++ miranda/docs/autoexec_sample.ini	(working copy)
@@ -57,6 +57,21 @@
 ;Note that some parts of Miranda won't notice changes on-the-fly, so it will
 ;be necessary to restart Miranda before the changes take effect.
 
+;There are two file formats: original and new (utf8 encoded).
+;Original format is fully compatible with older miranda versions.
+;New format has the same syntax, but entire files are utf8 encoded with
+;BOM signature (0xEF, 0xBB, 0xBF) at the beginnig. Module names, setting names
+;and non-unicode string settings are not supposed to be utf8 encoded, so
+;will be converted into the default langpack encoding. Also, the following
+;escape sequences in all strings (module names, setting names and string
+;settings) will be replaced:
+; \n - linefeed (0x0A)
+; \r - carriage return (0x0D)
+; \t - horizontal tab (0x09)
+; \\ - backslash
+; \xHH, where H are hexadecimals - character 0xHH & 0x7F
+; \C, where C is any other character - C
+
 ;The example that follows, then, is a heavily annotated script to provide a
 ;new background bitmap for the contact list and set the text colour to yellow.
 ;It's assumed that you have packaged background.bmp in a .zip with this file
@@ -86,12 +101,13 @@
 
 ;--end of example--
 
-;There are two data types that haven't been used here: blob and delete.
+;There are three data types that haven't been used here: utf8, blob and delete.
 ;Delete is easy: just use eg "BkColour=l" (that's a lowercase L). This example
 ;causes the background solid colour to be the same colour as the users choice
 ;for 3D objects facing straight on, eg most of the taskbar.
 ;Blobs are of the form "Font=n03 f5 2a" where those are hexadecimal pairs
 ;representing each byte to set.
+;Utf8 is like ordinal string except for value encoding and database type.
 
 ;The final thing to note is that there are settings that it is possible to
 ;change using this file, but that you'll wreck consistency if you do so. It's
