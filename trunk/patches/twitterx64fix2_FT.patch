Index: trunk
===================================================================
--- trunk	(Revision 11)
+++ trunk	(Arbeitskopie)

Eigenschaftsänderungen: trunk
___________________________________________________________________
Modified: svn:ignore
## -6,4 +6,5 ##
 Debug
 Release
 ipch
+miranda
 oauth.h
Index: trunk/common.h
===================================================================
--- trunk/common.h	(Revision 11)
+++ trunk/common.h	(Arbeitskopie)
@@ -18,6 +18,7 @@
 #pragma once
 
 #define MIRANDA_VER 0x800
+#define MIRANDA_CUSTOM_LP
 
 #include <string>
 using std::string;
Index: trunk/connection.cpp
===================================================================
--- trunk/connection.cpp	(Revision 11)
+++ trunk/connection.cpp	(Arbeitskopie)
@@ -104,21 +104,21 @@
 	wstring oauthAccessTokenSecret;
 	string screenName;
 
-	int dbTOK = DBGetContactSettingWString(0,m_szModuleName,TWITTER_KEY_OAUTH_TOK,&dbv);
+	INT_PTR dbTOK = DBGetContactSettingWString(0,m_szModuleName,TWITTER_KEY_OAUTH_TOK,&dbv);
 	if (!dbTOK) {
 		oauthToken = dbv.pwszVal;
 		DBFreeVariant(&dbv);
 		//WLOG("**NegotiateConnection - we have an oauthToken already in the db - %s", oauthToken);
 	}
  
-	int dbTOKSec = DBGetContactSettingWString(0,m_szModuleName,TWITTER_KEY_OAUTH_TOK_SECRET,&dbv);
+	INT_PTR dbTOKSec = DBGetContactSettingWString(0,m_szModuleName,TWITTER_KEY_OAUTH_TOK_SECRET,&dbv);
 	if (!dbTOKSec) {
 		oauthTokenSecret = dbv.pwszVal;
 		DBFreeVariant(&dbv);
 		//WLOG("**NegotiateConnection - we have an oauthTokenSecret already in the db - %s", oauthTokenSecret);
 	}
 
-	int dbName = DBGetContactSettingString(0,m_szModuleName,TWITTER_KEY_NICK,&dbv);
+	INT_PTR dbName = DBGetContactSettingString(0,m_szModuleName,TWITTER_KEY_NICK,&dbv);
 	if (!dbName) {
 		screenName = dbv.pszVal;
 		DBFreeVariant(&dbv);
Index: trunk/m_folders.h
===================================================================
--- trunk/m_folders.h	(Revision 11)
+++ trunk/m_folders.h	(Arbeitskopie)
@@ -27,12 +27,14 @@
 #define CURRENT_PROFILE "%current_profile%"
 #define MIRANDA_PATH "%miranda_path%"
 #define PLUGINS_PATH "%miranda_path%" "\\plugins"
+#define MIRANDA_USERDATA "%miranda_userdata%"
 
 #define TO_WIDE(x)     L ## x
 
 #define PROFILE_PATHW    L"%profile_path%"
 #define CURRENT_PROFILEW L"%current_profile%"
 #define MIRANDA_PATHW    L"%miranda_path%"
+#define MIRANDA_USERDATAW L"%miranda_userdata%"
 
 #define FOLDER_AVATARS                 PROFILE_PATH "\\" CURRENT_PROFILE "\\avatars"
 #define FOLDER_VCARDS                  PROFILE_PATH "\\" CURRENT_PROFILE "\\vcards"
@@ -78,16 +80,16 @@
 
 /*Folders/Register/Path service
   wParam - not used, must be 0
-  lParam - (LPARAM) (const FOLDERDATA *) - Data structure filled with 
+  lParam - (LPARAM) (const FOLDERDATA *) - Data structure filled with
   the necessary information.
-  Returns a handle to the registered path or 0 on error. 
+  Returns a handle to the registered path or 0 on error.
   You need to use this to call the other services.
 */
 #define MS_FOLDERS_REGISTER_PATH "Folders/Register/Path"
 
 /*Folders/Get/PathSize service
   wParam - (WPARAM) (int) - handle to registered path
-  lParam - (LPARAM) (int *) - pointer to the variable that receives the size of the path 
+  lParam - (LPARAM) (int *) - pointer to the variable that receives the size of the path
   string (not including the null character). Depending on the flags set when creating the path
   it will either call strlen() or wcslen() to get the length of the string.
   Returns the size of the buffer.
@@ -172,10 +174,10 @@
 	return (HANDLE) CallService(MS_FOLDERS_REGISTER_PATH, 0, (LPARAM) &fd);
 }
 
-__inline static int FoldersGetCustomPath(HANDLE hFolderEntry, char *path, const int size, const char *notFound)
+__inline static INT_PTR FoldersGetCustomPath(HANDLE hFolderEntry, char *path, const int size, const char *notFound)
 {
 	FOLDERSGETDATA fgd = {0};
-	int res;
+	INT_PTR res;
 	fgd.cbSize = sizeof(FOLDERSGETDATA);
 	fgd.nMaxPathSize = size;
 	fgd.szPath = path;
@@ -186,14 +188,14 @@
 		CallService(MS_UTILS_PATHTOABSOLUTE, (WPARAM) notFound, (LPARAM) buffer);
 		mir_snprintf(path, size, "%s", buffer);
 	}
-		
+
 	return res;
 }
 
-__inline static int FoldersGetCustomPathW(HANDLE hFolderEntry, wchar_t *pathW, const int count, const wchar_t *notFoundW)
+__inline static INT_PTR FoldersGetCustomPathW(HANDLE hFolderEntry, wchar_t *pathW, const int count, const wchar_t *notFoundW)
 {
 	FOLDERSGETDATA fgd = {0};
-	int res;
+	INT_PTR res;
 	fgd.cbSize = sizeof(FOLDERSGETDATA);
 	fgd.nMaxPathSize = count;
 	fgd.szPathW = pathW;
@@ -203,14 +205,14 @@
 		wcsncpy(pathW, notFoundW, count);
 		pathW[count - 1] = '\0';
 	}
-		
+
 	return res;
 }
 
-__inline static int FoldersGetCustomPathEx(HANDLE hFolderEntry, char *path, const int size, char *notFound, char *fileName)
+__inline static INT_PTR FoldersGetCustomPathEx(HANDLE hFolderEntry, char *path, const int size, char *notFound, char *fileName)
 {
 	FOLDERSGETDATA fgd = {0};
-	int res;
+	INT_PTR res;
 	fgd.cbSize = sizeof(FOLDERSGETDATA);
 	fgd.nMaxPathSize = size;
 	fgd.szPath = path;
@@ -228,19 +230,19 @@
 	else{
 		path[0] = '\0';
 	}
-	
+
 	if (fileName)
 	{
 		strcat(path, fileName);
 	}
-	
+
 	return res;
 }
 
-__inline static int FoldersGetCustomPathExW(HANDLE hFolderEntry, wchar_t *pathW, const int count, wchar_t *notFoundW, wchar_t *fileNameW)
+__inline static INT_PTR FoldersGetCustomPathExW(HANDLE hFolderEntry, wchar_t *pathW, const int count, wchar_t *notFoundW, wchar_t *fileNameW)
 {
 	FOLDERSGETDATA fgd = {0};
-	int res;
+	INT_PTR res;
 	fgd.cbSize = sizeof(FOLDERSGETDATA);
 	fgd.nMaxPathSize = count;
 	fgd.szPathW = pathW;
@@ -250,7 +252,7 @@
 		wcsncpy(pathW, notFoundW, count);
 		pathW[count - 1] = '\0';
 	}
-	
+
 	if (wcslen(pathW) > 0)
 	{
 		wcscat(pathW, L"\\");
@@ -258,12 +260,12 @@
 	else{
 		pathW[0] = L'\0';
 	}
-	
+
 	if (fileNameW)
 	{
 		wcscat(pathW, fileNameW);
 	}
-	
+
 	return res;
 }
 
@@ -279,4 +281,4 @@
 
 #endif
 
-#endif //M_CUSTOM_FOLDERS_H
+#endif //M_CUSTOM_FOLDERS_H
\ Kein Zeilenumbruch am Ende der Datei
Index: trunk/m_historyevents.h
===================================================================
--- trunk/m_historyevents.h	(Revision 11)
+++ trunk/m_historyevents.h	(Arbeitskopie)
@@ -209,7 +209,7 @@
 
 
 
-static int HistoryEvents_Register(char *module, char *name, char *description, int eventType, HICON defaultIcon, 
+static INT_PTR HistoryEvents_Register(char *module, char *name, char *description, int eventType, HICON defaultIcon, 
 								  int supports, int flags, fGetHistoryEventText pfGetHistoryEventText)
 {
 	HISTORY_EVENT_HANDLER heh = {0};
@@ -229,7 +229,7 @@
 	return CallService(MS_HISTORYEVENTS_REGISTER, (WPARAM) &heh, 0);
 }
 
-static int HistoryEvents_RegisterWithTemplates(char *module, char *name, char *description, int eventType, HICON defaultIcon, 
+static INT_PTR HistoryEvents_RegisterWithTemplates(char *module, char *name, char *description, int eventType, HICON defaultIcon, 
 								  int supports, int flags, fGetHistoryEventText pfGetHistoryEventText,
 								  char **templates, int numTemplates)
 {
@@ -252,7 +252,7 @@
 	return CallService(MS_HISTORYEVENTS_REGISTER, (WPARAM) &heh, 0);
 }
 
-static int HistoryEvents_RegisterMessageStyle(char *module, char *name, char *description, int eventType, HICON defaultIcon, 
+static INT_PTR HistoryEvents_RegisterMessageStyle(char *module, char *name, char *description, int eventType, HICON defaultIcon, 
 										int flags, char **templates, int numTemplates)
 {
 	HISTORY_EVENT_HANDLER heh = {0};
Index: trunk/m_updater.h
===================================================================
--- trunk/m_updater.h	(Revision 11)
+++ trunk/m_updater.h	(Arbeitskopie)
@@ -63,7 +63,11 @@
 	return CreateVersionString(pluginInfo->version, buf);
 }
 
+__inline static char *CreateVersionStringPluginEx(PLUGININFOEX *pluginInfo, char *buf) {
+	return CreateVersionString(pluginInfo->version, buf);
+}
 
+
 // register the 'easy' way - use this method if you have no beta URL and the plugin is on the miranda file listing
 // NOTE: the plugin version string on the file listing must be the string version of the version in pluginInfo (i.e. 0.0.0.1,
 // four numbers between 0 and 255 inclusivem, so no letters, brackets, etc.)
Index: trunk/main.cpp
===================================================================
--- trunk/main.cpp	(Revision 11)
+++ trunk/main.cpp	(Arbeitskopie)
@@ -28,6 +28,7 @@
 MM_INTERFACE mmi;
 UTF8_INTERFACE utfi;
 LIST_INTERFACE li;
+int hLangpack = 0;
 
 CLIST_INTERFACE* pcli;
 
@@ -35,7 +36,11 @@
 
 PLUGININFOEX pluginInfo={
 	sizeof(PLUGININFOEX),
+#ifdef WIN64
+	"Twitter Plugin (x64)",
+#else
 	"Twitter Plugin",
+#endif
 	__VERSION_DWORD,
 	"Provides basic support for Twitter protocol. [Built: "__DATE__" "__TIME__"]",
 	"dentist, omniwolf, Thief",
@@ -44,8 +49,13 @@
 	"http://code.google.com/p/miranda-twitter-oauth/",
 	UNICODE_AWARE, //not transient
 	0,             //doesn't replace anything built-in
+#ifdef WIN64
+	// {ECD828A6-FF3C-4F24-95CE-5FF73A06FB6F}
+	{ 0xecd828a6, 0xff3c, 0x4f24, { 0x95, 0xce, 0x5f, 0xf7, 0x3a, 0x6, 0xfb, 0x6f } }
+#else
 	//{BC09A71B-B86E-4d33-B18D-82D30451DD3C}
     { 0xbc09a71b, 0xb86e, 0x4d33, { 0xb1, 0x8d, 0x82, 0xd3, 0x4, 0x51, 0xdd, 0x3c } }
+#endif
 };
 
 /////////////////////////////////////////////////////////////////////////////
@@ -125,8 +135,7 @@
 		upd.szBetaUpdateURL      = "http://www.teamboxel.com/update/twitter/ansi";
 #endif
 
-		upd.pbVersion = reinterpret_cast<BYTE*>( CreateVersionStringPlugin(
-			reinterpret_cast<PLUGININFO*>(&pluginInfo),curr_version) );
+		upd.pbVersion = reinterpret_cast<BYTE*>( CreateVersionStringPluginEx(&pluginInfo,curr_version) );
 		upd.cpbVersion = strlen(reinterpret_cast<char*>(upd.pbVersion));
 
 		CallService(MS_UPDATE_REGISTER,0,(LPARAM)&upd);
@@ -144,6 +153,7 @@
 	mir_getMD5I(&md5i);
 	mir_getUTFI(&utfi);
 	mir_getLI(&li);
+	mir_getLP(&pluginInfo);
 
 	pcli = reinterpret_cast<CLIST_INTERFACE*>( CallService(
 		MS_CLIST_RETRIEVE_INTERFACE,0,reinterpret_cast<LPARAM>(g_hInstance)) );
Index: trunk/proto.cpp
===================================================================
--- trunk/proto.cpp	(Revision 11)
+++ trunk/proto.cpp	(Arbeitskopie)
@@ -110,7 +110,7 @@
 
 // *************************
 
-DWORD TwitterProto::GetCaps(int type,HANDLE hContact)
+DWORD_PTR TwitterProto::GetCaps(int type,HANDLE hContact)
 {
 	switch(type)
 	{
@@ -126,9 +126,9 @@
 	case PFLAG_MAXLENOFMESSAGE:
 		return 159; // 140 + <max length of a users name (15 apparently)> + 4 ("RT @").  this allows for the new style retweets
 	case PFLAG_UNIQUEIDTEXT:
-		return (int) "Username";
+		return (DWORD_PTR) "Username";
 	case PFLAG_UNIQUEIDSETTING:
-		return (int) TWITTER_KEY_UN;
+		return (DWORD_PTR) TWITTER_KEY_UN;
 	}
 	return 0;
 }
@@ -251,7 +251,7 @@
 
 int TwitterProto::GetName(WPARAM wParam,LPARAM lParam)
 {
-	lstrcpynA(reinterpret_cast<char*>(lParam),m_szProtoName,wParam);
+	lstrcpynA(reinterpret_cast<char*>(lParam),m_szProtoName,(int)wParam);
 	return 0;
 }
 
@@ -260,7 +260,7 @@
 	return m_iStatus;
 }
 
-int TwitterProto::ReplyToTweet(WPARAM wParam,LPARAM lParam)
+INT_PTR TwitterProto::ReplyToTweet(WPARAM wParam,LPARAM lParam)
 {
 	// TODO: support replying to tweets instead of just users
 	HANDLE hContact = reinterpret_cast<HANDLE>(wParam);
@@ -280,7 +280,7 @@
 	return 0;
 }
 
-int TwitterProto::VisitHomepage(WPARAM wParam,LPARAM lParam)
+INT_PTR TwitterProto::VisitHomepage(WPARAM wParam,LPARAM lParam)
 {
 	HANDLE hContact = reinterpret_cast<HANDLE>(wParam);
 
@@ -498,7 +498,7 @@
 		MessageBox(0,popup.lptzText,popup.lptzContactName,0);
 }
 
-int TwitterProto::LOG(const char *fmt,...)
+INT_PTR TwitterProto::LOG(const char *fmt,...)
 {
 	va_list va;
 	char text[1024];
@@ -512,7 +512,7 @@
 	return CallService(MS_NETLIB_LOG,(WPARAM)hNetlib_,(LPARAM)text);
 }
 
-int TwitterProto::WLOG(const char* first, const wstring last)
+INT_PTR TwitterProto::WLOG(const char* first, const wstring last)
 {
 	char *str1 = new char[1024*96];
 	sprintf(str1,"%ls", last.c_str());
Index: trunk/proto.h
===================================================================
--- trunk/proto.h	(Revision 11)
+++ trunk/proto.h	(Arbeitskopie)
@@ -62,7 +62,7 @@
 	virtual	int    __cdecl FileDeny(HANDLE,HANDLE,const char *);
 	virtual	int    __cdecl FileResume(HANDLE,int *,const char **);
 
-	virtual	DWORD  __cdecl GetCaps(int,HANDLE = 0);
+	virtual	DWORD_PTR  __cdecl GetCaps(int,HANDLE = 0);
 	virtual	HICON  __cdecl GetIcon(int);
 	virtual	int    __cdecl GetInfo(HANDLE,int);
 
@@ -100,8 +100,8 @@
 	int  __cdecl SvcCreateAccMgrUI(WPARAM,LPARAM);
 	int  __cdecl GetName(WPARAM,LPARAM);
 	int  __cdecl GetStatus(WPARAM,LPARAM);
-	int  __cdecl ReplyToTweet(WPARAM,LPARAM);
-	int  __cdecl VisitHomepage(WPARAM,LPARAM);
+	INT_PTR  __cdecl ReplyToTweet(WPARAM,LPARAM);
+	INT_PTR  __cdecl VisitHomepage(WPARAM,LPARAM);
 	int  __cdecl GetAvatar(WPARAM,LPARAM);
 	int  __cdecl SetAvatar(WPARAM,LPARAM);
 
@@ -146,8 +146,8 @@
 	HANDLE AddToClientList(const char *,const char *);
 	void SetAllContactStatuses(int);
 
-	int LOG(const char *fmt,...);
-	int WLOG(const char* first, const wstring last);
+	INT_PTR LOG(const char *fmt,...);
+	INT_PTR WLOG(const char* first, const wstring last);
 	static void CALLBACK APC_callback(ULONG_PTR p);
 
 	void UpdateChat(const twitter_user &update);
Index: trunk/theme.cpp
===================================================================
--- trunk/theme.cpp	(Revision 11)
+++ trunk/theme.cpp	(Arbeitskopie)
@@ -115,8 +115,8 @@
 	return 0;
 }
 
-template<int (__cdecl TwitterProto::*Fcn)(WPARAM,LPARAM)>
-int GlobalService(WPARAM wParam,LPARAM lParam)
+template<INT_PTR (__cdecl TwitterProto::*Fcn)(WPARAM,LPARAM)>
+INT_PTR GlobalService(WPARAM wParam,LPARAM lParam)
 {
 	TwitterProto *proto = GetInstanceByHContact(reinterpret_cast<HANDLE>(wParam));
 	return proto ? (proto->*Fcn)(wParam,lParam) : 0;
Index: trunk/twitter.vcxproj
===================================================================
--- trunk/twitter.vcxproj	(Revision 11)
+++ trunk/twitter.vcxproj	(Arbeitskopie)
@@ -112,8 +112,6 @@
     <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(Configuration)\</IntDir>
     <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">true</LinkIncremental>
     <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</LinkIncremental>
-    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(SolutionDir)$(Configuration)\</OutDir>
-    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(SolutionDir)$(Configuration)\</OutDir>
     <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(Configuration)\</IntDir>
     <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(Configuration)\</IntDir>
     <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">false</LinkIncremental>
@@ -182,7 +180,7 @@
     <ClCompile>
       <Optimization>Disabled</Optimization>
       <AdditionalIncludeDirectories>.\miranda;%(AdditionalIncludeDirectories);D:\code\boost_1_43_0</AdditionalIncludeDirectories>
-      <PreprocessorDefinitions>WIN32;_WINDOWS;_USRDLL;TWITTER_EXPORTS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PreprocessorDefinitions>WIN64;_WINDOWS;_USRDLL;TWITTER_EXPORTS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
       <PrecompiledHeader>
@@ -198,7 +196,7 @@
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
     <ClCompile>
-      <AdditionalIncludeDirectories>.\miranda;%(AdditionalIncludeDirectories);D:\code\boost_1_43_0</AdditionalIncludeDirectories>
+      <AdditionalIncludeDirectories>.\miranda;$(ProjectDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
       <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;TWITTER_EXPORTS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
       <PrecompiledHeader>
@@ -216,8 +214,8 @@
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
     <ClCompile>
-      <AdditionalIncludeDirectories>.\miranda;%(AdditionalIncludeDirectories);D:\code\boost_1_43_0</AdditionalIncludeDirectories>
-      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;TWITTER_EXPORTS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <AdditionalIncludeDirectories>.\miranda;$(ProjectDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <PreprocessorDefinitions>WIN64;NDEBUG;_WINDOWS;_USRDLL;TWITTER_EXPORTS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
       <PrecompiledHeader>
       </PrecompiledHeader>
@@ -252,7 +250,7 @@
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release ANSI|x64'">
     <ClCompile>
       <AdditionalIncludeDirectories>.\miranda;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
-      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;TWITTER_EXPORTS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PreprocessorDefinitions>WIN64;NDEBUG;_WINDOWS;_USRDLL;TWITTER_EXPORTS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
       <PrecompiledHeader>
       </PrecompiledHeader>
@@ -289,7 +287,7 @@
     <ClCompile>
       <Optimization>Disabled</Optimization>
       <AdditionalIncludeDirectories>.\miranda;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
-      <PreprocessorDefinitions>WIN32;_WINDOWS;_USRDLL;TWITTER_EXPORTS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <PreprocessorDefinitions>WIN64;_WINDOWS;_USRDLL;TWITTER_EXPORTS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
       <PrecompiledHeader>
Index: trunk/ui.cpp
===================================================================
--- trunk/ui.cpp	(Revision 11)
+++ trunk/ui.cpp	(Arbeitskopie)
@@ -38,7 +38,7 @@
 		TranslateDialogDefault(hwndDlg);
 
 		proto = reinterpret_cast<TwitterProto*>(lParam);
-		SetWindowLong(hwndDlg,GWL_USERDATA,lParam);
+		SetWindowLongPtr(hwndDlg,GWLP_USERDATA,lParam);
 
 		DBVARIANT dbv;
 
@@ -90,7 +90,7 @@
 			return true;
 		}
 
-		if(GetWindowLong(hwndDlg,GWL_USERDATA)) // Window is done initializing
+		if(GetWindowLong(hwndDlg,GWLP_USERDATA)) // Window is done initializing
 		{
 			switch(HIWORD(wParam))
 			{
@@ -105,7 +105,7 @@
 	case WM_NOTIFY: // might be able to get rid of this bit?
 		if(reinterpret_cast<NMHDR*>(lParam)->code == PSN_APPLY) 
 		{
-			proto = reinterpret_cast<TwitterProto*>(GetWindowLong(hwndDlg,GWL_USERDATA));
+			proto = reinterpret_cast<TwitterProto*>(GetWindowLong(hwndDlg,GWLP_USERDATA));
 			char str[128];
 			TCHAR tstr[128];
 			
@@ -144,7 +144,7 @@
 		TranslateDialogDefault(hwndDlg);
 
 		proto = reinterpret_cast<TwitterProto*>(lParam);
-		SetWindowLong(hwndDlg,GWL_USERDATA,lParam);
+		SetWindowLongPtr(hwndDlg,GWLP_USERDATA,lParam);
 		SendDlgItemMessage(hwndDlg,IDC_TWEETMSG,EM_LIMITTEXT,140,0);
 		SetDlgItemText(hwndDlg,IDC_CHARACTERS,_T("140"));
 
@@ -158,7 +158,7 @@
 		if(LOWORD(wParam) == IDOK)
 		{
 			TCHAR msg[141];
-			proto = reinterpret_cast<TwitterProto*>(GetWindowLong(hwndDlg,GWL_USERDATA));
+			proto = reinterpret_cast<TwitterProto*>(GetWindowLong(hwndDlg,GWLP_USERDATA));
 
 			GetDlgItemText(hwndDlg,IDC_TWEETMSG,msg,SIZEOF(msg));
 			ShowWindow(hwndDlg,SW_HIDE);
@@ -177,9 +177,9 @@
 		else if(LOWORD(wParam) == IDC_TWEETMSG && HIWORD(wParam) == EN_CHANGE)
 		{
 			size_t len = SendDlgItemMessage(hwndDlg,IDC_TWEETMSG,WM_GETTEXTLENGTH,0,0);
-			char str[4];
-			_snprintf(str,sizeof(str),"%d",140-len);
-			SetDlgItemTextA(hwndDlg,IDC_CHARACTERS,str);
+			TCHAR str[4];
+			mir_sntprintf(str,sizeof(str),_T("%d"),140-len);
+			SetDlgItemText(hwndDlg,IDC_CHARACTERS,str);
 
 			return true;
 		}
@@ -187,16 +187,16 @@
 		break;
 	case WM_SETREPLY:
 		{
-			char foo[512];
-			_snprintf(foo,sizeof(foo),"@%s ",(char*)wParam);
-			size_t len = strlen(foo);
+			TCHAR foo[512];
+			mir_sntprintf(foo,sizeof(foo),_T("@%s "),(char*)wParam);
+			size_t len = _tcslen(foo);
 
-			SetDlgItemTextA(hwndDlg,IDC_TWEETMSG,foo);
+			SetDlgItemText(hwndDlg,IDC_TWEETMSG,foo);
 			SendDlgItemMessage(hwndDlg,IDC_TWEETMSG,EM_SETSEL,len,len);
 
-			char str[4];
-			_snprintf(str,sizeof(str),"%d",140-len);
-			SetDlgItemTextA(hwndDlg,IDC_CHARACTERS,str);
+			TCHAR str[4];
+			mir_sntprintf(str,sizeof(str),_T("%d"),140-len);
+			SetDlgItemText(hwndDlg,IDC_CHARACTERS,str);
 
 			return true;
 		}
@@ -218,9 +218,9 @@
 		proto = reinterpret_cast<TwitterProto*>(lParam);
 
 		DBVARIANT dbv;
-		if( !DBGetContactSettingString(0,proto->ModuleName(),TWITTER_KEY_UN,&dbv) )
+		if( !DBGetContactSettingTString(0,proto->ModuleName(),TWITTER_KEY_UN,&dbv) )
 		{
-			SetDlgItemTextA(hwndDlg,IDC_UN,dbv.pszVal);
+			SetDlgItemText(hwndDlg,IDC_UN,dbv.ptszVal);
 			DBFreeVariant(&dbv);
 		}
 
@@ -241,9 +241,9 @@
 				reinterpret_cast<LPARAM>(sites[i]));
 		}
 
-		if( !DBGetContactSettingString(0,proto->ModuleName(),TWITTER_KEY_BASEURL,&dbv) )
+		if( !DBGetContactSettingTString(0,proto->ModuleName(),TWITTER_KEY_BASEURL,&dbv) )
 		{
-			SetDlgItemTextA(hwndDlg,IDC_BASEURL,dbv.pszVal);
+			SetDlgItemText(hwndDlg,IDC_BASEURL,dbv.ptszVal);
 			DBFreeVariant(&dbv);
 		}
 		else
@@ -251,10 +251,10 @@
 			SendDlgItemMessage(hwndDlg,IDC_BASEURL,CB_SETCURSEL,0,0);
 		}
 		
-		char pollrate_str[32];
-		mir_snprintf(pollrate_str,sizeof(pollrate_str),"%d",
+		TCHAR pollrate_str[32];
+		mir_sntprintf(pollrate_str,sizeof(pollrate_str),_T("%d"),
 			DBGetContactSettingDword(0,proto->ModuleName(),TWITTER_KEY_POLLRATE,80) );
-		SetDlgItemTextA(hwndDlg,IDC_POLLRATE,pollrate_str);
+		SetDlgItemText(hwndDlg,IDC_POLLRATE,pollrate_str);
 
 		CheckDlgButton(hwndDlg,IDC_TWEET_MSG,DBGetContactSettingByte(0,
 			proto->ModuleName(),TWITTER_KEY_TWEET_TO_MSG,0));
@@ -262,11 +262,11 @@
 
 		// Do this last so that any events propagated by pre-filling the form don't
 		// instigate a PSM_CHANGED message
-		SetWindowLong(hwndDlg,GWL_USERDATA,lParam);
+		SetWindowLongPtr(hwndDlg,GWLP_USERDATA,lParam);
 
 		break;
 	case WM_COMMAND:
-		if(GetWindowLong(hwndDlg,GWL_USERDATA)) // Window is done initializing
+		if(GetWindowLong(hwndDlg,GWLP_USERDATA)) // Window is done initializing
 		{
 			switch(HIWORD(wParam))
 			{
@@ -289,26 +289,26 @@
 	case WM_NOTIFY:
 		if(reinterpret_cast<NMHDR*>(lParam)->code == PSN_APPLY) 
 		{
-			proto = reinterpret_cast<TwitterProto*>(GetWindowLong(hwndDlg,GWL_USERDATA));
-			char str[128];
+			proto = reinterpret_cast<TwitterProto*>(GetWindowLong(hwndDlg,GWLP_USERDATA));
+			TCHAR str[128];
 
-			GetDlgItemTextA(hwndDlg,IDC_UN,str,sizeof(str));
-			DBWriteContactSettingString(0,proto->ModuleName(),TWITTER_KEY_UN,str);
+			GetDlgItemText(hwndDlg,IDC_UN,str,sizeof(str));
+			DBWriteContactSettingTString(0,proto->ModuleName(),TWITTER_KEY_UN,str);
 
 			/*GetDlgItemTextA(hwndDlg,IDC_PW,str,sizeof(str));
 			CallService(MS_DB_CRYPT_ENCODESTRING,sizeof(str),reinterpret_cast<LPARAM>(str));
 			DBWriteContactSettingString(0,proto->ModuleName(),TWITTER_KEY_PASS,str);*/
 
-			GetDlgItemTextA(hwndDlg,IDC_BASEURL,str,sizeof(str)-1);
-			if(str[strlen(str)-1] != '/')
-				strncat(str,"/",sizeof(str));
-			DBWriteContactSettingString(0,proto->ModuleName(),TWITTER_KEY_BASEURL,str);
+			GetDlgItemText(hwndDlg,IDC_BASEURL,str,sizeof(str)-1);
+			if(str[_tcslen(str)-1] != '/')
+				_tcsncat(str,_T("/"),sizeof(str));
+			DBWriteContactSettingTString(0,proto->ModuleName(),TWITTER_KEY_BASEURL,str);
 
 			DBWriteContactSettingByte(0,proto->ModuleName(),TWITTER_KEY_CHATFEED,
 				IsDlgButtonChecked(hwndDlg,IDC_CHATFEED));
 
-			GetDlgItemTextA(hwndDlg,IDC_POLLRATE,str,sizeof(str));
-			int rate = atoi(str);
+			GetDlgItemText(hwndDlg,IDC_POLLRATE,str,sizeof(str));
+			int rate = _ttoi(str);
 			if(rate == 0)
 				rate = 80;
 			DBWriteContactSettingDword(0,proto->ModuleName(),TWITTER_KEY_POLLRATE,rate);
@@ -332,9 +332,9 @@
 			return -1;
 		else if(IsDlgButtonChecked(hwndDlg,IDC_TIMEOUT_CUSTOM))
 		{
-			char str[32];
-			GetDlgItemTextA(hwndDlg,IDC_TIMEOUT,str,sizeof(str));
-			return atoi(str);
+			TCHAR str[32];
+			GetDlgItemText(hwndDlg,IDC_TIMEOUT,str,sizeof(str));
+			return _ttoi(str);
 		}
 		else // Default checked (probably)
 			return 0;
@@ -394,7 +394,7 @@
 
 		// Pick a random contact
 		HANDLE hContact = 0;
-		int n_contacts = CallService(MS_DB_CONTACT_GETCOUNT,0,0);
+		INT_PTR n_contacts = CallService(MS_DB_CONTACT_GETCOUNT,0,0);
 
 		if(n_contacts != 0)
 		{
@@ -480,7 +480,7 @@
 		}
 
 		SendDlgItemMessage(hwndDlg,IDC_TIMEOUT_SPIN,UDM_SETRANGE32,1,INT_MAX);
-		SetWindowLong(hwndDlg,GWL_USERDATA,lParam);
+		SetWindowLongPtr(hwndDlg,GWLP_USERDATA,lParam);
 
 		return true;
 	case WM_COMMAND:
@@ -520,14 +520,14 @@
 			}
 
 		case EN_CHANGE:
-			if(GetWindowLong(hwndDlg,GWL_USERDATA)) // Window is done initializing
+			if(GetWindowLong(hwndDlg,GWLP_USERDATA)) // Window is done initializing
 				SendMessage(GetParent(hwndDlg),PSM_CHANGED,0,0);
 		}
 		break;
 	case WM_NOTIFY:
 		if(reinterpret_cast<NMHDR*>(lParam)->code == PSN_APPLY) 
 		{
-			proto = reinterpret_cast<TwitterProto*>(GetWindowLong(hwndDlg,GWL_USERDATA));
+			proto = reinterpret_cast<TwitterProto*>(GetWindowLong(hwndDlg,GWLP_USERDATA));
 
 			DBWriteContactSettingByte(0,proto->ModuleName(),TWITTER_KEY_POPUP_SHOW,
 				IsDlgButtonChecked(hwndDlg,IDC_SHOWPOPUPS));
@@ -562,13 +562,13 @@
 		case WM_INITDIALOG:
 			TranslateDialogDefault(hwndDlg);
 
-			SetWindowLong(hwndDlg,GWL_USERDATA,lParam);
+			SetWindowLongPtr(hwndDlg,GWLP_USERDATA,lParam);
 
 			return true;
 		case WM_COMMAND:
 			if(LOWORD(wParam) == IDOK)
 			{
-				proto = reinterpret_cast<TwitterProto*>(GetWindowLong(hwndDlg,GWL_USERDATA));
+				proto = reinterpret_cast<TwitterProto*>(GetWindowLong(hwndDlg,GWLP_USERDATA));
 				char str[128];
 
 				GetDlgItemTextA(hwndDlg,IDC_PIN,str,sizeof(str));
Index: trunk/utility.cpp
===================================================================
--- trunk/utility.cpp	(Revision 11)
+++ trunk/utility.cpp	(Arbeitskopie)
@@ -23,7 +23,7 @@
 std::string b64encode(const std::string &s)
 {
 	NETLIBBASE64 encode;
-	encode.cbDecoded = s.length();
+	encode.cbDecoded = (int)s.length();
 	encode.pbDecoded = (BYTE*)s.c_str();
 	encode.cchEncoded = Netlib_GetBase64EncodedBufferSize(encode.cbDecoded);
 	encode.pszEncoded = new char[encode.cchEncoded+1];
@@ -151,7 +151,7 @@
 	return resp_data;
 }
 
-int mir_twitter::LOG(const char *fmt,...)
+INT_PTR mir_twitter::LOG(const char *fmt,...)
 {
 	va_list va;
 	char text[1024];
@@ -165,7 +165,7 @@
 	return CallService(MS_NETLIB_LOG,(WPARAM)handle_,(LPARAM)text);
 }
 
-int mir_twitter::WLOG(const char* first, const std::wstring last)
+INT_PTR mir_twitter::WLOG(const char* first, const std::wstring last)
 {
 	char *str1 = new char[1024*96];
 	sprintf(str1,"%ls", last.c_str());
Index: trunk/utility.h
===================================================================
--- trunk/utility.h	(Revision 11)
+++ trunk/utility.h	(Arbeitskopie)
@@ -111,8 +111,8 @@
 
 protected:
 	http::response slurp(const std::string &,http::method, OAuthParameters );
-	int LOG(const char *fmt,...);
-	int WLOG(const char* first, const std::wstring last);
+	INT_PTR LOG(const char *fmt,...);
+	INT_PTR WLOG(const char* first, const std::wstring last);
 
 	HANDLE httpPOST_;
 	HANDLE handle_;
